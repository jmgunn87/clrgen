{
  "comment_fmt":       ["/*","*/\n"],
  "stack_access_fmt":  ["item_synth_val","parse_stack.peek(",")"],
  "table_fmt":         ["    {","{",",","},\n     ","}};\n"],
  "action_fmt":        ["{","}"],
  "skeleton_def":
  {
    "filename":"cskeleton.h",
    "content":" "
  },
  "skeleton_def":
  {
    "filename":"cskeleton.c",
    "content":"
template
<
  class token_type,
  template <class T> class stack_type
>
class $GRAMMAR_NAME_parser
{
protected:
  static const short accept_state=$ACCEPT_STATE;
  int stack_init_size;
  int stack_grow_amount;
  token_type item_synth_val;
  stack_type<token_type> parse_stack;

/*****************************************************
 * Constructors/Destructors for $GRAMMAR_NAME_parser *
 *****************************************************/
public:
  $GRAMMAR_NAME_parser():stack_init_size(10),
                         stack_grow_amount(10),
                         parse_stack(stack_init),
                         item_synth_val()
  {
  };
  $GRAMMAR_NAME_parser(int stack_init,int stack_grow):stack_init_size(stack_init),
                                                      stack_grow_amount(stack_grow)
                                                      parse_stack(stack_init),
                                                      item_synth_val()
  {
  };
  ~$GRAMMAR_NAME_parser()
  {
    stack_init_size=0;
    stack_grow_amount=0;
  };

/**************************************************
 * declare and define public methods for parsing  *
 * <token_type> tokens.                           *
 * these functions will be virtual allowing mods  *
 * to the parser driver.                          *
 **************************************************/
public:
  virtual short $GRAMMAR_NAME_parse_token(token_type* token)
  {
    int top_state=0;
    int pop_count=0;
    int action=0;
  
    //initialize the stack at state 0
    if(stack_cursor==-1)
      parse_stack.push(0,0);
  
    while(1)
    {
      top_state=parse_stack.peek(0).lex_id;
      if(!token)action=parse_table[top_state][18];
      else if(token->lex_id>=18)return 0;
      else action=parse_table[top_state][token->lex_id];
    
      if(action==accept_state)//accept
      {
        action=--(parse_stack.peek(0).lex_id);
        __prh(&action);
        return accept_state;
      }
      if(action>0)//shift
      {
        parse_stack.push(action,input->lex_val);
        return 1;
      }
      else if(action<0)/*reduce*/
      {
        pop_count=__prh(&action);
        if(pop_count==-1)
          return 0;//catch errors here*/

        parse_stack.pop(pop_count);//pop the stack n times specified by __prh*/

        /*push the reduction along with any synthesised values*/
        parse_stack.push(parse_table[parse_stack.peek(0).lex_id][action],item_synth_val);
        item_synth_val=0;
        continue;
      }
      else/*error*/
      {
        return 0;
      }
    }
  };
  inline short $GRAMMAR_NAME_accept_state()
  {
    return accept_state;
  };


protected:
  static const short parse_table[$PTABLE_ROW_DIM][$PTABLE_COL_DIM]=\n$PTABLE
};
"
  }
}
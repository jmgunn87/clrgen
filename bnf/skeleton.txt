/* Skeleton Variables
//
//PTABLE_ROW_DIM   table row dimension
//PTABLE_COL_DIM   table column dimension
//PTABLE           insert the parse table
//REDUCE_ACT       insert the reduction handler code
//ACCEPT_STATE     parser accept state
*/

#define ACCEPT $ACCEPT_STATE;
static int ptable[$PTABLE_ROW_DIM][$PTABLE_COL_DIM]=$PTABLE
int reduce_actions(int* ri)
{
  switch(-*ri)
  {
$REDUCE_ACT
  }
}

int __parse_token(lp_token* input)
{
  int top_state=0;
  int pop_count=0;
  int action=0;
  
  /*initialize the stack at state 0*/
  if(stack_cursor==-1)
    PUSH_STACK(0,0);
  
  while(1)
  {
    top_state=PEEK_STACK(0).lex_id;
    if(!input)action=parse_table[top_state][18];
    else if(input->lex_id>=18)return 0;
    else action=parse_table[top_state][input->lex_id];
    
    if(action==ACCEPT)/*ACCEPT*/
    {
      action=--(PEEK_STACK(0).lex_id);
      __prh(&action);
      return ACCEPT;
    }
    if(action>0)/*SHIFT*/
    {
      PUSH_STACK(action,input->lex_val);
      return 1;
    }
    else if(action<0)/*REDUCE*/
    {
      pop_count=__prh(&action);
      if(pop_count==-1)
        return 0;/*catch errors here*/
      POP_STACK(pop_count);/*pop the stack n times specified by __prh*/
      PUSH_STACK(parse_table[PEEK_STACK(0).lex_id][action],__item_synth_val);/*push the reduction along with any synthesised values*/
      __item_synth_val=0;
      continue;
    }
    else/*error*/
    {
      return 0;
    }
  }
}


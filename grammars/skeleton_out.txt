/**************************************************************************
 *  NanoLR(1) Parser Generator                                            *
 *  Copyright (C) 2011  James Marshall-Gunn                               *
 *------------------------------------------------------------------------*
 *  This program is free software: you can redistribute it and/or modify  *
 *  it under the terms of the GNU General Public License as published by  *
 *  the Free Software Foundation, either version 3 of the License, or     *
 *  (at your option) any later version.                                   *
 *                                                                        *
 *  This program is distributed in the hope that it will be useful,       *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *  GNU General Public License for more details.                          *
 *                                                                        *
 *  You should have received a copy of the GNU General Public License     *
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>  *
 **************************************************************************/

/* Skeleton Variables
//
//PTABLE_ROW_DIM   table row dimension
//PTABLE_COL_DIM   table column dimension
//PTABLE           insert the parse table
//REDUCE_ACT       insert the reduction handler code
//ACCEPT_STATE     parser accept state
*/

#define ACCEPT 27;
static int ptable[26][19]=
{{0,1,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27},
{0,0,3,4,0,0,0,0,5,0,6,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,-4,8,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,-2,-2,0,0,0,-2,0,0,0,0,-2},
{0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,-3,-3,0,0,0,-3,0,0,0,0,-3},
{0,0,10,4,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0},
{0,11,0,0,12,0,13,2,0,0,14,0,15,0,16,17,18,19,0},
{0,0,0,0,0,0,0,0,-5,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,-13,-13,0,0,0,-13,0,0,0,0,0},
{0,0,0,0,0,0,0,0,-14,-14,0,0,0,-14,0,0,0,0,0},
{0,0,0,0,0,0,0,0,-6,-6,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,-11,-11,0,0,0,-11,0,0,0,0,0},
{0,11,0,0,12,20,21,2,0,0,14,0,15,22,16,17,18,19,0},
{0,0,0,0,0,0,0,0,-12,-12,0,0,0,-12,0,0,0,0,0},
{0,0,0,0,0,0,0,0,-15,-15,0,0,0,-15,0,0,0,0,0},
{0,0,0,0,0,0,0,0,-16,-16,0,0,0,-16,0,0,0,0,0},
{0,0,0,0,0,0,0,0,-17,-17,0,0,0,-17,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,24,0,0,0,-9,0,0,0,0,0},
{0,0,0,0,0,0,0,0,-7,-7,0,0,0,-7,0,0,0,0,0},
{0,0,0,0,0,0,0,0,-8,-8,0,0,0,-8,0,0,0,0,0},
{0,11,0,0,12,25,21,2,0,0,14,0,15,0,16,17,18,19,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,-10,0,0,0,0,0}};

int reduce_actions(int* ri)
{
  switch(-*ri)
  {
    case 2:
      *ri=1;
{printf("<object>\n");}      return 2;
    case 3:
      *ri=1;
{
    printf("<object>");
    __item_synth_val=(void*)current_object;
    current_object=new_slist();
  }      return 3;
    case 4:
      *ri=2;
{
    printf("<members>\n");
    slist_append(current_object,PEEK_STACK(0));
  }      return 1;
    case 5:
      *ri=2;
{
    printf("<members>\n");
    slist_append(current_object,PEEK_STACK(2));
  }      return 3;
    case 6:
      *ri=3;
{
    printf("<pair>\n");
    current_pair=new_json_pair((char*)PEEK_STACK(2),(json_value*)PEEK_STACK(0));
    __item_synth_val=(void*)current_pair;
  }      return 3;
    case 7:
      *ri=4;
{printf("<array>\n");}      return 2;
    case 8:
      *ri=4;
{
    printf("<array>\n");
    __item_synth_val=(void*)current_array;
    current_array=new_slist();
  }      return 3;
    case 9:
      *ri=5;
{
    printf("<elements>\n");
    slist_append(current_array,(void*)PEEK_STACK(0));
    __item_synth_val=PEEK_STACK(0);
  }      return 1;
    case 10:
      *ri=5;
{
    printf("<elements>");
    slist_append(current_array,(void*)PEEK_STACK(2));
    __item_synth_val=PEEK_STACK(2);
  }      return 3;
    case 11:
      *ri=6;
{ printf("<value>\n"); __item_synth_val=(void*)new_json_value(JS_STRING,PEEK_STACK(0));}      return 1;
    case 12:
      *ri=6;
{ printf("<value>\n"); __item_synth_val=(void*)new_json_value(JS_NUMBER,PEEK_STACK(0));}      return 1;
    case 13:
      *ri=6;
{ printf("<value>\n"); __item_synth_val=(void*)new_json_value(JS_OBJECT,PEEK_STACK(0));}      return 1;
    case 14:
      *ri=6;
{ printf("<value>\n"); __item_synth_val=(void*)new_json_value(JS_ARRAY,PEEK_STACK(0)); }      return 1;
    case 15:
      *ri=6;
{ printf("<value>\n"); __item_synth_val=(void*)new_json_value(JS_TRUE,PEEK_STACK(0));  }      return 1;
    case 16:
      *ri=6;
{ printf("<value>\n"); __item_synth_val=(void*)new_json_value(JS_FALSE,PEEK_STACK(0)); }      return 1;
    case 17:
      *ri=6;
{ printf("<value>\n"); __item_synth_val=(void*)new_json_value(JS_NULL,PEEK_STACK(0));  }      return 1;

  }
}

int __parse_token(lp_token* input)
{
  int top_state=0;
  int pop_count=0;
  int action=0;
  
  /*initialize the stack at state 0*/
  if(stack_cursor==-1)
    PUSH_STACK(0,0);
  
  while(1)
  {
    top_state=PEEK_STACK(0).lex_id;
    if(!input)action=parse_table[top_state][18];
    else if(input->lex_id>=18)return 0;
    else action=parse_table[top_state][input->lex_id];
    
    if(action==ACCEPT)/*ACCEPT*/
    {
      action=--(PEEK_STACK(0).lex_id);
      __prh(&action);
      return ACCEPT;
    }
    if(action>0)/*SHIFT*/
    {
      PUSH_STACK(action,input->lex_val);
      return 1;
    }
    else if(action<0)/*REDUCE*/
    {
      pop_count=__prh(&action);
      if(pop_count==-1)
        return 0;/*catch errors here*/
      POP_STACK(pop_count);/*pop the stack n times specified by __prh*/
      PUSH_STACK(parse_table[PEEK_STACK(0).lex_id][action],__item_synth_val);/*push the reduction along with any synthesised values*/
      __item_synth_val=0;
      continue;
    }
    else/*error*/
    {
      return 0;
    }
  }
}

